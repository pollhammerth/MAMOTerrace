% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mm_linRef.R
\name{mm_linRef}
\alias{mm_linRef}
\title{Calculate the orthogonally projected distance of points on a line.}
\usage{
mm_linRef(p, l, addz = F, asVector = T)
}
\arguments{
\item{p}{SpatVector of Points for which the orthogonally projected distance on a line should be calculated.}

\item{l}{SpatVector, line on which points should be projected.}

\item{addz}{logical. Should also the distance to the line be added? = T. Increases calculation time. Only set T, if you need z values.}

\item{asVector}{logical. Should the output be a spatVector = T or a spatRaster = F.}
}
\value{
spatVector or spatRaster
}
\description{
Requires terra, s2, and sf packages.
Takes a SpatVector of points, that are projected on a SpatVector line, and the distance along the line is added to the point object as a new column. Additionally the distance to the line can be added as z. The standard output is a SpatVector, but can be set to SpatRaster.
Output is a SpatVector of points or a SpatRaster.
}
\examples{
profile_line = terra::vect("notInPackage/testdata/profile.gpkg");
ras = mm_prepRas(profile=profile_line, 3000, c("notInPackage/testdata/lidar.tif","notInPackage/testdata/lidarFilled.tif"), 50, makeSlope = T, makeShade = T);
rap = terra::as.points(ras);
rapp = mm_linRef(p = ras, l = profile_line, addz = T, asVector = T);
}
