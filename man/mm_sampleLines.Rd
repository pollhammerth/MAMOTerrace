% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mm_sampleLines.R
\name{mm_sampleLines}
\alias{mm_sampleLines}
\title{Sample points along lines, extracting raster value for each point.}
\usage{
mm_sampleLines(l, cropper = NA, density, raster = NA, fieldName = "rastValu")
}
\arguments{
\item{l}{SpatVector or path to gpkg of lines to sample.}

\item{cropper}{SpatVector(e.g. profile_buffer), to which the lines are cropped.}

\item{density}{Number of points within one unit.}

\item{raster}{SpatRaster, from which values are attached to the output.}

\item{fieldName}{Name of the field, where the raster values will be stored. Standard is "rastValu".}
}
\value{
spatVector of points
}
\description{
Requires terra, sf packages.
Takes a spatVector of lines (or the path to a shapefile) and a spatRaster. Points are placed along the line in a given density (number per unit), and raster values are extracted at the point locations. The lines are cropped, to match the profile buffer.
Output is a SpatVector of points attributed by the local raster values.
}
\examples{
profile_buffer = terra::buffer(x = terra::vect("notInPackage/testdata/profile.gpkg"), width = 3000, capstyle = "flat", joinstyle = "round");
ras = mm_prepRas(profile=profile_line, 3000, c("notInPackage/testdata/lidar.tif","notInPackage/testdata/lidarFilled.tif"), 50, makeSlope = T, makeShade = T);
samplePoints = mm_sampleLines(l = "notInPackage/testdata/rivers.gpkg", cropper = profile_buffer, density = 0.01, raster = ras$lidar);
}
